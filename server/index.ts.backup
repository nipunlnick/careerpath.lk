import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';

dotenv.config();

import connectToDatabase from '../lib/mongodb';
import { CareerRoadmapService } from '../lib/models/CareerRoadmap';
import { QuizResultService } from '../lib/models/QuizResult';
import { generateRoadmap, suggestCareers, suggestCareersLong } from '../services/geminiService';
import crypto from 'crypto';

const app = express();
app.use(cors());
app.use(express.json({ limit: '1mb' }));
app.use(cors());
app.use(express.json());

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// Helper function to generate quiz answers hash
function generateAnswersHash(answers: any[]): string {
  const normalizedAnswers = answers.map(answer => 
    typeof answer === 'string' ? answer.toLowerCase().trim() : JSON.stringify(answer)
  ).sort();
  return crypto.createHash('md5').update(JSON.stringify(normalizedAnswers)).digest('hex');
}

// Roadmap endpoints (existing)
app.get('/api/roadmaps/slug/:slug', async (req, res) => {
  try {
    const { slug } = req.params;
    console.log(`Looking up roadmap with slug: ${slug}`);
    
    // First, try to find the roadmap in the database
    const existingRoadmap = await CareerRoadmapService.findBySlug(slug);
    
    if (existingRoadmap) {
      console.log('Found existing roadmap in database');
      res.json({
        success: true,
        data: existingRoadmap,
        cached: true
      });
    } else {
      console.log('No existing roadmap found');
      res.json({
        success: true,
        data: null,
        cached: false
      });
    }
  } catch (error) {
    console.error('Error looking up roadmap:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to lookup roadmap' 
    });
  }
});

app.post('/api/roadmaps/generate', async (req, res) => {
  try {
    const { careerPath } = req.body;
    console.log(`Generating roadmap for: ${careerPath}`);
    
    if (!careerPath) {
      return res.status(400).json({ 
        success: false, 
        error: 'Career path is required' 
      });
    }

    // Generate the roadmap using Gemini
    const roadmapData = await generateRoadmap(careerPath);
    
    // Create slug from career path
    const slug = careerPath.toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '');
    
    // Store the roadmap in database
    const savedRoadmap = await CareerRoadmapService.create({
      name: careerPath,
      slug,
      category: 'Generated',
      description: `Career roadmap for ${careerPath}`,
      steps: roadmapData.roadmap,
      marketInsights: roadmapData.marketInsights,
      difficulty: 'intermediate',
      estimatedDuration: '2-4 years',
      tags: [careerPath],
      isActive: true
    });
    
    console.log('Generated and stored new roadmap');
    res.json({
      success: true,
      data: savedRoadmap,
      cached: false
    });
    
  } catch (error) {
    console.error('Error generating roadmap:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to generate roadmap' 
    });
  }
});

// Quiz result endpoints
app.get('/api/quiz/results/:hash', async (req, res) => {
  try {
    const { hash } = req.params;
    const { quizType } = req.query;
    
    console.log(`Looking up quiz result with hash: ${hash}, type: ${quizType}`);
    
    // Find cached result by hash and quiz type
    const cachedResult = await QuizResultService.findByHash(hash, quizType as string);
    
    if (cachedResult) {
      console.log('Found cached quiz result');
      res.json({
        success: true,
        cached: true,
        result: cachedResult.result,
const PORT = process.env.PORT || 3001;

// Health check endpoint
        cached: false,
        result: null
      });
    }
  } catch (error) {
    console.error('Error looking up quiz result:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to lookup quiz result' 
    });
  }
});

app.post('/api/quiz/generate', async (req, res) => {
  try {
    const { answers, quizType, userId } = req.body;
    
    if (!answers) {
      return res.status(400).json({ 
        success: false, 
        error: 'Answers are required' 
      });
    }
    
    // Convert answers to consistent format for hashing and API calls
    let answersForHashing: any;
    let answersForAPI: Record<string, string>;
    
    if (Array.isArray(answers)) {
      // Convert array to object for API compatibility 
      answersForHashing = answers;
      answersForAPI = answers.reduce((acc, answer, index) => {
        acc[`q${index}`] = typeof answer === 'string' ? answer : JSON.stringify(answer);
        return acc;
      }, {} as Record<string, string>);
    } else {
      // Already in object format
      answersForHashing = answers;
      answersForAPI = answers as Record<string, string>;
    }
    
    // Generate hash for the answers
    const answersHash = generateAnswersHash(answersForHashing);
    console.log(`Generating quiz result for hash: ${answersHash}, type: ${quizType}`);
    
    // Check if we already have a cached result
    const existingResult = await QuizResultService.findByHash(answersHash, quizType);
    if (existingResult) {
      console.log('Returning existing cached result');
      return res.json({
        success: true,
        cached: true,
        result: existingResult.result,
        hash: answersHash
      });
    }
    
    // Generate new result using appropriate Gemini service
    let careerSuggestions;
    if (quizType === 'long') {
      careerSuggestions = await suggestCareersLong(answersForAPI);
    } else {
      careerSuggestions = await suggestCareers(answersForAPI);
    }
    
    // Store the result in database
    const quizResult = await QuizResultService.create({
      userId,
      answersHash,
      answers: answersForHashing,
      result: careerSuggestions,
      quizType: quizType || 'standard',
      completedAt: new Date()
    });
    
    console.log('Generated and cached new quiz result');
    res.json({
      success: true,
      cached: false,
      result: careerSuggestions,
      hash: answersHash
    });
    
  } catch (error) {
    console.error('Error generating quiz result:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to generate quiz result' 
    });
  }
});

const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(express.json({ limit: '1mb' }));

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// Helper function to generate quiz answers hash
function generateAnswersHash(answers: any[]): string {
  const normalizedAnswers = answers.map(answer => 
    typeof answer === 'string' ? answer.toLowerCase().trim() : JSON.stringify(answer)
  ).sort();
  return crypto.createHash('md5').update(JSON.stringify(normalizedAnswers)).digest('hex');
}

// Get roadmap by slug from DB
app.get('/api/roadmaps/slug/:slug', async (req, res) => {
  const { slug } = req.params;
  try {
    const roadmap = await CareerRoadmapService.getBySlug(slug);
    if (!roadmap) {
      return res.status(404).json({ success: false, error: 'Not found' });
    }
    return res.json({ success: true, data: roadmap });
  } catch (err) {
    console.error('GET /api/roadmaps/slug/:slug error', err);
    return res.status(500).json({ success: false, error: 'Server error' });
  }
});

// Generate a roadmap (if not in DB) and persist
app.post('/api/roadmaps/generate', async (req, res) => {
  const { name, slug } = req.body;
  if (!name) return res.status(400).json({ success: false, error: 'Missing name' });

  const finalSlug = slug || name.toLowerCase().replace(/ /g, '-').replace(/[^\w-]+/g, '');

  try {
    // Check DB first
    const existing = await CareerRoadmapService.getBySlug(finalSlug);
    if (existing) return res.json({ success: true, data: existing, cached: true });

    // Generate using Gemini service
    const generated = await generateRoadmap(name);

    if (!generated || !generated.roadmap) {
      return res.status(500).json({ success: false, error: 'Generation failed' });
    }

    // Create a document to store
    const doc = {
      name,
      slug: finalSlug,
      category: 'Generated',
      description: `Auto-generated roadmap for ${name}`,
      steps: generated.roadmap,
      marketInsights: generated.insights || null,
      difficulty: 'beginner',
      estimatedDuration: 'Varies',
      tags: [],
      isActive: true
    };

    const created = await CareerRoadmapService.create(doc as any);

    // Mongo returns insert result; fetch inserted doc
    const insertedId = (created.insertedId as any).toString();
    const saved = await CareerRoadmapService.getById(insertedId);

    return res.json({ success: true, data: saved, cached: false });
  } catch (err) {
    console.error('POST /api/roadmaps/generate error', err);
    return res.status(500).json({ success: false, error: 'Server error' });
  }
});

// Basic bootstrap: connect DB then start
(async () => {
  try {
    await connectToDatabase();
    app.listen(PORT, () => {
      // eslint-disable-next-line no-console
      console.log(`API server listening on http://localhost:${PORT}`);
    });
  } catch (err) {
    console.error('Failed to start server', err);
    process.exit(1);
  }
})();
