import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import html2canvas from 'html2canvas';
import type { RoadmapStep, MarketInsights } from '../types';

export interface DownloadOptions {
  format: 'pdf' | 'png' | 'jpeg';
  quality?: number; // For image formats
  includeInsights?: boolean;
  includeNotes?: string;
}

export class RoadmapDownloadService {
  
  static async downloadAsPDF(
    roadmapName: string, 
    roadmap: RoadmapStep[], 
    insights?: MarketInsights, 
    options: Partial<DownloadOptions> = {}
  ): Promise<void> {
    const { includeInsights = true, includeNotes = '' } = options;
    
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.getWidth();
    let startY = 20;

    // --- Header ---
    doc.setFontSize(22);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(40);
    const titleLines = doc.splitTextToSize(`Career Roadmap: ${roadmapName}`, pageWidth - 28);
    doc.text(titleLines, 14, startY);
    startY += titleLines.length * 8 + 5;

    // Subtitle
    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(100);
    doc.text('Generated by CareerPath.lk', 14, startY);
    startY += 10;

    // Date
    doc.setFontSize(10);
    doc.setTextColor(150);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, startY);
    startY += 15;

    // --- Market Insights Section ---
    if (includeInsights && insights) {
      doc.setFontSize(16);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(40);
      doc.text('Market Insights', 14, startY);
      startY += 10;

      const insightsData = [
        ['Market Demand', insights.demand || 'N/A'],
        ['Salary Range (LKR)', insights.salaryRange || 'N/A'],
        ['Required Skills', Array.isArray(insights.requiredSkills) 
          ? insights.requiredSkills.join(', ') 
          : insights.requiredSkills || 'N/A'],
        ['Future Outlook', insights.futureOutlook || 'N/A']
      ];

      (doc as any).autoTable({
        startY: startY,
        head: [['Category', 'Details']],
        body: insightsData,
        theme: 'striped',
        headStyles: { fillColor: [34, 197, 94] }, // Green
        styles: { fontSize: 10 },
        columnStyles: {
          0: { fontStyle: 'bold', cellWidth: 50 },
          1: { cellWidth: 'auto' }
        }
      });

      startY = (doc as any).autoTable.previous.finalY + 15;
    }

    // --- Notes Section ---
    if (includeNotes && includeNotes.trim()) {
      if (startY > 250) {
        doc.addPage();
        startY = 20;
      }

      doc.setFontSize(16);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(40);
      doc.text('Personal Notes', 14, startY);
      startY += 10;

      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(80);
      const notesLines = doc.splitTextToSize(includeNotes, pageWidth - 28);
      doc.text(notesLines, 14, startY);
      startY += notesLines.length * 5 + 15;
    }

    // --- Career Steps ---
    if (startY > 250) {
      doc.addPage();
      startY = 20;
    }

    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.setTextColor(40);
    doc.text('Career Roadmap Steps', 14, startY);
    startY += 15;

    roadmap.forEach((step, index) => {
      // Check if we need a new page
      if (startY > 250) {
        doc.addPage();
        startY = 20;
      }

      // Step header
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(40);
      doc.text(`Step ${step.step}: ${step.title}`, 14, startY);
      startY += 8;

      // Step details
      const stepDetails = [
        ['Description', step.description || 'N/A'],
        ['Duration', step.duration || 'N/A'],
        ['Qualifications', Array.isArray(step.qualifications) 
          ? step.qualifications.join(', ') 
          : step.qualifications || 'N/A'],
        ['Skills to Develop', Array.isArray(step.skills) 
          ? step.skills.join(', ') 
          : step.skills || 'N/A'],
        ['Salary Range (LKR)', step.salaryRangeLKR || 'N/A'],
        ['Training Institutes', Array.isArray(step.institutes) 
          ? step.institutes.join(', ') 
          : step.institutes || 'N/A']
      ];

      (doc as any).autoTable({
        startY: startY,
        head: [['Category', 'Details']],
        body: stepDetails,
        theme: 'grid',
        headStyles: { fillColor: [52, 73, 94] },
        styles: { fontSize: 9 },
        columnStyles: {
          0: { fontStyle: 'bold', cellWidth: 45 },
          1: { cellWidth: 'auto' }
        },
        margin: { left: 14, right: 14 }
      });

      startY = (doc as any).autoTable.previous.finalY + 12;
    });

    // --- Footer ---
    const pageCount = (doc as any).internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(150);
      const footerText = `Page ${i} of ${pageCount} | Generated by CareerPath.lk | ${new Date().toLocaleDateString()}`;
      const footerX = (pageWidth - doc.getTextWidth(footerText)) / 2;
      doc.text(footerText, footerX, doc.internal.pageSize.getHeight() - 10);
    }

    // Save the PDF
    const fileName = `CareerPath_${roadmapName.replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().getTime()}.pdf`;
    doc.save(fileName);
  }

  static async downloadAsImage(
    elementId: string,
    roadmapName: string,
    options: Partial<DownloadOptions> = {}
  ): Promise<void> {
    const { format = 'png', quality = 0.95 } = options;
    
    try {
      const element = document.getElementById(elementId);
      if (!element) {
        throw new Error('Roadmap element not found');
      }

      // Create canvas from the roadmap element
      const canvas = await html2canvas(element, {
        scale: 2, // Higher quality
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff',
        scrollX: 0,
        scrollY: 0,
        width: element.scrollWidth,
        height: element.scrollHeight
      });

      // Convert to blob and download
      canvas.toBlob((blob) => {
        if (!blob) {
          throw new Error('Failed to generate image');
        }

        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.download = `CareerPath_${roadmapName.replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().getTime()}.${format}`;
        link.href = url;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
      }, `image/${format}`, quality);

    } catch (error) {
      console.error('Error generating roadmap image:', error);
      throw new Error('Failed to download roadmap as image');
    }
  }

  static async downloadRoadmapData(
    roadmapName: string,
    roadmap: RoadmapStep[],
    insights?: MarketInsights,
    notes?: string
  ): Promise<void> {
    const data = {
      roadmapName,
      generatedDate: new Date().toISOString(),
      roadmap,
      insights,
      notes,
      source: 'CareerPath.lk'
    };

    const jsonString = JSON.stringify(data, null, 2);
    const blob = new Blob([jsonString], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const link = document.createElement('a');
    link.download = `CareerPath_${roadmapName.replace(/[^a-zA-Z0-9]/g, '_')}_data_${new Date().getTime()}.json`;
    link.href = url;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }
}